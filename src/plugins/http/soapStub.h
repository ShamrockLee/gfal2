/* soapStub.h
   Generated by gSOAP 2.7.13 from /root/build/gfal2/src/common/http/delegation.h
   Copyright(C) 2000-2009, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#ifndef soapStub_H
#define soapStub_H
#include <vector>
#include "stdsoap2.h"

/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not redeclare here */

#endif

#if 0 /* volatile type: do not redeclare here */

#endif

#ifndef SOAP_TYPE_tns__DelegationExceptionType
#define SOAP_TYPE_tns__DelegationExceptionType (8)
/* tns:DelegationExceptionType */
class SOAP_CMAC tns__DelegationExceptionType
{
public:
	std::string *message;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 8; } /* = unique id SOAP_TYPE_tns__DelegationExceptionType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns__DelegationExceptionType() : message(NULL), soap(NULL) { }
	virtual ~tns__DelegationExceptionType() { }
};
#endif

#ifndef SOAP_TYPE_tns__NewProxyReq
#define SOAP_TYPE_tns__NewProxyReq (9)
/* tns:NewProxyReq */
class SOAP_CMAC tns__NewProxyReq
{
public:
	std::string *proxyRequest;	/* optional element of type xsd:string */
	std::string *delegationID;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 9; } /* = unique id SOAP_TYPE_tns__NewProxyReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tns__NewProxyReq() : proxyRequest(NULL), delegationID(NULL), soap(NULL) { }
	virtual ~tns__NewProxyReq() { }
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (13)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	tns__DelegationExceptionType *tns__DelegationException;	/* optional element of type tns:DelegationExceptionType */
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
	char *__any;
};
#endif

#ifndef SOAP_TYPE_tns__getProxyReqResponse
#define SOAP_TYPE_tns__getProxyReqResponse (17)
/* tns:getProxyReqResponse */
struct tns__getProxyReqResponse
{
public:
	std::string _getProxyReqReturn;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_tns__getProxyReq
#define SOAP_TYPE_tns__getProxyReq (20)
/* tns:getProxyReq */
struct tns__getProxyReq
{
public:
	std::string _delegationID;	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_tns__getNewProxyReqResponse
#define SOAP_TYPE_tns__getNewProxyReqResponse (21)
/* tns:getNewProxyReqResponse */
struct tns__getNewProxyReqResponse
{
public:
	tns__NewProxyReq *getNewProxyReqReturn;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tns:NewProxyReq */
};
#endif

#ifndef SOAP_TYPE_tns__getNewProxyReq
#define SOAP_TYPE_tns__getNewProxyReq (25)
/* tns:getNewProxyReq */
struct tns__getNewProxyReq
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_tns__renewProxyReqResponse
#define SOAP_TYPE_tns__renewProxyReqResponse (26)
/* tns:renewProxyReqResponse */
struct tns__renewProxyReqResponse
{
public:
	std::string _renewProxyReqReturn;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_tns__renewProxyReq
#define SOAP_TYPE_tns__renewProxyReq (29)
/* tns:renewProxyReq */
struct tns__renewProxyReq
{
public:
	std::string _delegationID;	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_tns__putProxyResponse
#define SOAP_TYPE_tns__putProxyResponse (30)
/* tns:putProxyResponse */
struct tns__putProxyResponse
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_tns__putProxy
#define SOAP_TYPE_tns__putProxy (33)
/* tns:putProxy */
struct tns__putProxy
{
public:
	std::string _delegationID;	/* required element of type xsd:string */
	std::string _proxy;	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_tns__getTerminationTimeResponse
#define SOAP_TYPE_tns__getTerminationTimeResponse (34)
/* tns:getTerminationTimeResponse */
struct tns__getTerminationTimeResponse
{
public:
	time_t _getTerminationTimeReturn;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:dateTime */
};
#endif

#ifndef SOAP_TYPE_tns__getTerminationTime
#define SOAP_TYPE_tns__getTerminationTime (38)
/* tns:getTerminationTime */
struct tns__getTerminationTime
{
public:
	std::string _delegationID;	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_tns__destroyResponse
#define SOAP_TYPE_tns__destroyResponse (39)
/* tns:destroyResponse */
struct tns__destroyResponse
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_tns__destroy
#define SOAP_TYPE_tns__destroy (42)
/* tns:destroy */
struct tns__destroy
{
public:
	std::string _delegationID;	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (43)
/* SOAP Header: */
struct SOAP_ENV__Header
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (44)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (46)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (47)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
};
#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
typedef char *_XML;
#endif


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operations                                                         *
 *                                                                            *
\******************************************************************************/


SOAP_FMAC5 int SOAP_FMAC6 tns__getProxyReq(struct soap*, std::string _delegationID, struct tns__getProxyReqResponse &_param_1);

SOAP_FMAC5 int SOAP_FMAC6 tns__getNewProxyReq(struct soap*, struct tns__getNewProxyReqResponse &_param_2);

SOAP_FMAC5 int SOAP_FMAC6 tns__renewProxyReq(struct soap*, std::string _delegationID, struct tns__renewProxyReqResponse &_param_3);

SOAP_FMAC5 int SOAP_FMAC6 tns__putProxy(struct soap*, std::string _delegationID, std::string _proxy, struct tns__putProxyResponse &_param_4);

SOAP_FMAC5 int SOAP_FMAC6 tns__getTerminationTime(struct soap*, std::string _delegationID, struct tns__getTerminationTimeResponse &_param_5);

SOAP_FMAC5 int SOAP_FMAC6 tns__destroy(struct soap*, std::string _delegationID, struct tns__destroyResponse &_param_6);

/******************************************************************************\
 *                                                                            *
 * Stubs                                                                      *
 *                                                                            *
\******************************************************************************/


SOAP_FMAC5 int SOAP_FMAC6 soap_call_tns__getProxyReq(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _delegationID, struct tns__getProxyReqResponse &_param_1);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_tns__getNewProxyReq(struct soap *soap, const char *soap_endpoint, const char *soap_action, struct tns__getNewProxyReqResponse &_param_2);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_tns__renewProxyReq(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _delegationID, struct tns__renewProxyReqResponse &_param_3);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_tns__putProxy(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _delegationID, std::string _proxy, struct tns__putProxyResponse &_param_4);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_tns__getTerminationTime(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _delegationID, struct tns__getTerminationTimeResponse &_param_5);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_tns__destroy(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _delegationID, struct tns__destroyResponse &_param_6);

/******************************************************************************\
 *                                                                            *
 * Skeletons                                                                  *
 *                                                                            *
\******************************************************************************/

SOAP_FMAC5 int SOAP_FMAC6 soap_serve(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_request(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_tns__getProxyReq(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_tns__getNewProxyReq(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_tns__renewProxyReq(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_tns__putProxy(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_tns__getTerminationTime(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_tns__destroy(struct soap*);

#endif

/* End of soapStub.h */
